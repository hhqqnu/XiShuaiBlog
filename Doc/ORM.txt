1：EF只是一个ORM框架，只是解决仓储层的问题，到于有人说“ORM注定了业务逻辑和数据库的高度耦合”，其实是理解错了，
ORM的O是数据对象，与表等有一定的偶合，但它从架构设计 上来说，只是仓储层的内聚设计，
与业务逻辑无关（当然现在很多小系统会用它来直接替代业务逻辑对象），
而真正的业务逻辑对象（按领域驱动设计来说）是领域对象，真正的的系统核心对象是领域对象，
而数据对象是可变的，领域对象则相对稳定，数据对象到领域对象是通过仓储层的适配器来实现的。

2、EF等ORM框架的优势是减少开发难度及维护难度，性能上没有优势。一个好的系统可能要考虑设计与性能的平衡，
只是谁轻谁重的问题。至于仓储层由于采用的ORM等技术带来的性能损耗，是可以通过底层数据库设计（如：视图、中间表、触发器等）
和应用层的缓存等技术手段来进行弥补。

就看见这一位明白人。上边有人说“ORM注定了业务逻辑和数据库的高度耦合”，估计是把ORM的O当成万能的了……



还有就是很多人讲座的数据模型问题，其实单从理论上来讲，一般的项目都会采用分层设计（也就是常见的三层架构），
每一层都是一个相对内聚的设计，一种松耦合结构。而层与层之间进行通讯的是DTO，而这个O常常不是ORM的O。
其实也可能不是DomainEntity,也不是ViewModel，但是它却有可能通过组合、分解等方式进行转换。ORM的O只是为了与表映射而矣，
基实有人说表就是业务，其实只说对了一半，表是基于业务，但进行了升化和抽象，并非绝对一一对应。

还有一点：有人说数据对象是稳定的，也有提一点。那要看数据是基于“数据”的设计，还是基于“对象”的设计。
如果是基于“对象”的设计，那么设计之初，就必须把业务对象分析清楚、我们常把它说成领域对象，
其实这个对象基本是稳定的（至少核心部分是稳定，如果核心对象变了，那是另一个话题，需求变了），
而数据对象可能就不一定了，有可能SqlServer数据有的类型其它数据库没有，同样随着重构的进行，为了提高性能，
可能会对一些表进行拆分和组合，原先在一个表中的数据，分成了两个表，或在视图中了。但不管数据表怎么变化，
最终也只是仓储层内部的实现方式变了，当然ORM的O也会变，但出了这一层，一切都还是原来的样子。